# CMake on multiple platforms (Ubuntu + Windows)
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        linkage: [static, shared]   # <â€” add a linkage axis
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: >
          cmake
          -B ${{ steps.strings.outputs.build-output-dir }}
          -S ${{ github.workspace }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DTIME_MANAGER_BUILD_TESTS=ON
          -DTIME_MANAGER_BUILD_SHARED=${{ matrix.linkage == 'shared' && 'ON' || 'OFF' }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      # Use two test steps so Windows can pass the config to ctest and *nix doesn't need it.
      - name: Test (Windows)
        if: runner.os == 'Windows'
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest -C ${{ matrix.build_type }} --output-on-failure

      - name: Test (*nix)
        if: runner.os != 'Windows'
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --output-on-failure
